import paseo.*
describe "test de una familia que NO pasea" {

//NOTA: Este fixture está incompleto y sirve para comenzar a testear el examen.
//Es a modo de ayuda, pero no es obligatorio respetar este escenario. 
// Puede modificarse tanto como sea necesario.

	var mediaIzquierda = new PrendaParIzq(desgaste = 1) //elemento de par
	var mediaDerecha = new PrendaParDer(desgaste = 3)
	
	//prenda par, la media izquierda tiene que tener 1 de desgaste, la derecha 3, el abrigo es default 0
    var mediasZoe = new PrendaPar(talle=s,prendaIzq=mediaIzquierda,prendaDer=mediaDerecha) 
	//prenda par, el izquierdo y derecho tiene los valores default (desgaste 0, abrigo 1)
	var zapatillaIzquierda =new PrendaParIzq() 
	var zapatillaDerecha =new PrendaParDer() 
	var zapatillasZoe = new PrendaPar(talle=s,prendaIzq=zapatillaIzquierda,prendaDer=zapatillaDerecha)
	
	//prenda pesada con 5 de abrigo
	var jeanZoe = new PrendaPesada(talle=s, abrigo=5) 
	
	//prenda liviana con desgaste default: 0
	var remeraZoe = new PrendaLiviana(talle=s) 
	// prenda pesada con desgaste default: 0
	var camperaZoe = new PrendaPesada(talle=s,abrigo=3) 

	//un juguete para niños de 5 a 100 anios
	var ukelele = new Juguete(edadMinima=5, edadMaxima=100)
	
	//prenda liviana con un desgaste de 5
	var remeraMilena = new PrendaLiviana(talle=xs, desgaste=5) //prenda liviana
	//prenda liviana con desgaste default: 0
	var calzaMilena = new PrendaLiviana(talle=xs) //prenda liviana

	//prenda par, la ojota izquierda tiene que tener 1 de desgaste y 2 de abrigo, la ojota derecha tiene 3 de desgaste y 3 de abrigo
	var ojotaIzquierda =new PrendaParIzq(desgaste = 1,abrigo=2) 
	var ojotaDerecha =new PrendaParDer(desgaste = 3,abrigo=3) 
    var ojotasMilena = new PrendaPar(talle=l,prendaIzq=ojotaIzquierda,prendaDer=ojotaDerecha)  
	
	//ninio
	var zoe = new Hijo(talle=s, edad=11, prendas=#{mediasZoe, zapatillasZoe, jeanZoe, remeraZoe, camperaZoe }) 
	//ninio problematico
	var milena = new HijoProblematico(talle=xs, edad=2, prendas = #{remeraMilena, calzaMilena, ojotasMilena }, juguete=ukelele)
	
	//familia	
	var familiaAptaSalir = new Familia(ninios = #{ zoe})

	//familia	
	var familiaNoAptaParaSalir= new Familia(ninios = #{milena, zoe})
	
	
//PUNTO 1	
	test "comodidad" {
		
     	assert.equals(6 , mediasZoe.nivelComodidad(zoe))
 		assert.equals(8 , zapatillasZoe.nivelComodidad(zoe))
		assert.equals(8 , jeanZoe.nivelComodidad(zoe))
		assert.equals(10 ,remeraZoe.nivelComodidad(zoe))
		assert.equals(8 , camperaZoe.nivelComodidad(zoe))
		assert.equals(7 , remeraMilena.nivelComodidad(milena))		
		assert.equals(10 ,calzaMilena.nivelComodidad(milena))
		assert.equals(-3 ,ojotasMilena.nivelComodidad(milena))
}

//PUNTO 2		
 	test "intercambiar pares ok" {
		var mediaIzq = mediasZoe.izquierdo()
		var mediaDer = mediasZoe.derecho()
		var zapaIzq = zapatillasZoe.izquierdo()
		var zapaDer = zapatillasZoe.derecho()
		
		mediasZoe.intercambiarPrenda(zapatillasZoe)

		assert.equals(mediaIzq, mediasZoe.izquierdo())
		assert.equals(mediaDer, zapatillasZoe.derecho())
		assert.equals(zapaIzq, zapatillasZoe.izquierdo())
		assert.equals(zapaDer, mediasZoe.derecho())
				
	}

	test "intercambiar pares no ok" {
		//Que sucede si intercambio un par de talles distinto?
		//probar el cambio entre las ojotas de milena y las medias de zoe
		//El test está incompleto!
		
		assert.throwsException({ojotasMilena.intercambiarPrenda(mediasZoe)})
	}

//PUNTO 3	
	test "nivel de abrigo" {
		assert.equals(2 ,  mediasZoe.nivelAbrigo())
		assert.equals(2 , zapatillasZoe.nivelAbrigo())
		assert.equals(5 , jeanZoe.nivelAbrigo())
		assert.equals(1 , remeraZoe.nivelAbrigo())
		assert.equals(3 , camperaZoe.nivelAbrigo())
		assert.equals(1 , remeraMilena.nivelAbrigo())		
		assert.equals(1 , calzaMilena.nivelAbrigo())
		assert.equals(5 , ojotasMilena.nivelAbrigo())
	}

//PUNTO 4		
	test "puede salir de paseo" {
		assert.that(familiaAptaSalir.puedeSalirDePaseo())
		assert.notThat(familiaNoAptaParaSalir.puedeSalirDePaseo())
	}
//PUNTO 5
	
	test "infaltables" {
		assert.equals(#{jeanZoe,calzaMilena}, familiaNoAptaParaSalir.prendasInfaltables())		
	}
	test "chiquitos" {
		assert.equals(#{milena}, familiaNoAptaParaSalir.hijosChiquitos())		
	}
	
//PUNTO 6	
test "salir de paseo ok" {
		familiaAptaSalir.salirDePaseo()
		assert.equals(1.8 , mediaIzquierda.nivelDesgaste(zoe))
		assert.equals(4.2 , mediaDerecha.nivelDesgaste(zoe))
		assert.equals(3 , mediasZoe.nivelDesgaste(zoe))
		assert.equals(1 , zapatillasZoe.nivelDesgaste(zoe))
		assert.equals(1 , jeanZoe.nivelDesgaste(zoe))
		assert.equals(1 , remeraZoe.nivelDesgaste(zoe))
		assert.equals(1 , camperaZoe.nivelDesgaste(zoe))
		
	}
//PUNTO 7	
	test "salir de paseo no ok" {
		//Que sucede si le pido pasear a una familia que no está lista?
		//El test está incompleto!
		assert.throwsException({familiaNoAptaParaSalir.salirDePaseo()})
	}
	


}